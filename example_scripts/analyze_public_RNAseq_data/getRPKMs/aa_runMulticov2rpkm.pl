#!/usr/bin/perl

use warnings;
use strict;

### parse the multicov log files to get arguments for the aa_multicov2rpkm.R script
## usage: ./aa_runMulticov2rpkm.pl *Logfile.txt

my $shellScriptFile = "aa_runMulticov2rpkm.sh";
my $Rscript_exe = "/app/software/R/4.0.2-foss-2019b/bin/Rscript";


open (SHELL, "> $shellScriptFile");
print SHELL "#!/bin/bash\n";
print SHELL "source /app/lmod/lmod/init/profile\n";
print SHELL "module load R/4.0.2-foss-2019b\n\n";

## I just want the names of the flagstats files that correspond to the bam file inputs
foreach my $file (@ARGV) {
    if ($file !~ m/Logfile\.txt$/) {
        die "\n\nTerminating - input files should be the log files generated by runBedtoolsCount.pl, i.e. *Logfile.txt\n\n";
    }
    if ($file =~ /chicken_21tissues/) {
        print "\nSkipping this file, because there is special R code for this dataset, so I combine counts across techincal replicates\n$file\n\n";
        next;
    }
    
    open (IN, "< $file");
    while (<IN>) {
        my $line = $_; chomp $line;
        ### at first I was using the 'counting reads' line
        #if ($line !~ m/counting\sreads\sfor\sregions\sin/) {next;}
        #$line =~ s/^.+?in\sthese\sbam\sfiles:\s//;
        ### now I am using the actual command I ran
        if ($line !~ m/bedtools\smulticov\s/) {next;}
        
        ### get flagstat file names:
        my $bamsString = (split /\-bams\s/, $line)[1];
        $bamsString = (split /\s\-bed/, $bamsString)[0]; 
        my @bams = split /\s/, $bamsString;
        my @flagstatsFiles;
        foreach my $bam (@bams) {
            my $flagstats = $bam . ".flagstats";
            if (!-e $flagstats) {
                die "\n\nTerminating - flagstats file does not exist:\n$flagstats\n\n";
            }
            push @flagstatsFiles, $flagstats;
        }
        
        ### get multicov file name
        my $multicovFile = (split /\s;\s/, $line)[0];
        $multicovFile = (split /\s/, $multicovFile)[-1];
        $multicovFile =~ s/\.temp$//;
        if (!-e $multicovFile) {
            die "\n\nTerminating - multicov file does not exist:\n$multicovFile\n\n";
        }
        #print "multicovFile $multicovFile blah\n";
        my $flagstatsFilesString = join " ", @flagstatsFiles;
        print SHELL "$Rscript_exe aa_multicov2rpkm.R $multicovFile $flagstatsFilesString  >& $multicovFile.RPKMs.Rout\n\n";
    }
    close IN;
}
print SHELL "module purge\n";
close SHELL;
